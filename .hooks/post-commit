#!/bin/bash

# ==================================================
# post-commit hook script
# ==================================================

echo "[DEBUG] Script start"

# --------------------------------------------------
# Load .env file
# --------------------------------------------------
if [ -f .env ]; then
  export "$(grep -v '^#' .env | xargs)"
fi

# --------------------------------------------------
# Retrieve the latest commit message
# --------------------------------------------------
LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
echo "[DEBUG] Commit message: $LAST_COMMIT_MSG"

# --------------------------------------------------
# If the commit message starts with "!", do nothing
# --------------------------------------------------
if [[ "$LAST_COMMIT_MSG" =~ ^!.* ]]; then
  echo "[DEBUG] The commit message starts with '!', so aborting."
  exit 0
fi

# --------------------------------------------------
# Check if OpenAI API Key is set
# --------------------------------------------------
if [ -z "$TWIN_DOCS_OPENAI_API_KEY" ]; then
  echo "[ERROR] TWIN_DOCS_OPENAI_API_KEY is not set. Please set the environment variable."
  exit 1
fi
echo "[DEBUG] OpenAI API Key is set."

# --------------------------------------------------
# Retrieve the list of changed files
# --------------------------------------------------
CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD)
echo "[DEBUG] Changed files: $CHANGED_FILES"

# --------------------------------------------------
# Function: translate_text
# Uses the OpenAI API to translate input text
# (can be multiple lines) from source_lang to target_lang
# --------------------------------------------------
translate_text() {
  local text="$1"
  local source_lang="$2"
  local target_lang="$3"
  echo "[DEBUG] Called translate_text function - source_lang: $source_lang, target_lang: $target_lang" >&2
  echo "[DEBUG] Text to translate: $text" >&2

  # ------------------------------------------------
  # JSON escape processing
  # ------------------------------------------------
  local escaped_text
  escaped_text=$(echo "$text" | jq -Rs .)
  echo "[DEBUG] Escaped text: $escaped_text" >&2

  # ------------------------------------------------
  # Generate JSON payload
  # ------------------------------------------------
  local payload
  payload=$(jq -n --arg model "gpt-4" \
    --arg source_lang "$source_lang" \
    --arg target_lang "$target_lang" \
    --arg content "$escaped_text" \
    '{
      model: $model,
      messages: [
        {
          role: "system",
          content: "You are a helpful assistant that translates text from \($source_lang) to \($target_lang). Translate carefully and preserve line breaks if possible."
        },
        {
          role: "user",
          content: $content
        }
      ],
      max_tokens: 2000,
      temperature: 0.2
    }')
  echo "[DEBUG] JSON payload: $payload" >&2

  # ------------------------------------------------
  # Call the OpenAI API
  # ------------------------------------------------
  local response
  response=$(curl -s https://api.openai.com/v1/chat/completions \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $TWIN_DOCS_OPENAI_API_KEY" \
    -d "$payload")

  echo "[DEBUG] API response: $response" >&2

  # ------------------------------------------------
  # Parse the response
  # ------------------------------------------------
  local translated_text
  translated_text=$(echo "$response" | jq -r '.choices[0].message.content // empty')

  # ------------------------------------------------
  # Error check
  # ------------------------------------------------
  if [ -z "$translated_text" ]; then
    echo "[ERROR] Could not retrieve translation. API response: $response" >&2
    return 1
  fi

  echo "[DEBUG] Translated text: $translated_text" >&2
  echo "$translated_text"
}

# --------------------------------------------------
# Function: apply_diff_translation
# Applies diff-based translations to a partner file
# --------------------------------------------------
apply_diff_translation() {
  local source_file="$1"
  local partner_file="$2"
  local source_lang="$3"
  local target_lang="$4"

  echo "[DEBUG] Called apply_diff_translation function - source_file: $source_file, partner_file: $partner_file" >&2

  # If partner_file does not exist, create it
  if [ ! -f "$partner_file" ]; then
    echo "[DEBUG] $partner_file does not exist. Creating a new file." >&2
    touch "$partner_file"
  fi

  # 1. Retrieve diff from the most recent commit
  local diff_output
  diff_output=$(git diff HEAD~1 HEAD -- "$source_file" 2>/dev/null)
  echo "[DEBUG] diff output: $diff_output" >&2

  # If there is no diff, do nothing
  if [ -z "$diff_output" ]; then
    echo "[DEBUG] No diff found in $source_file." >&2
    return 0
  fi

  # 2. Get full content of the source and partner files
  local source_content
  source_content=$(cat "$source_file")
  local partner_content
  partner_content=$(cat "$partner_file")

  # 3. Send to AI to generate the updated partner file content
  echo "[DEBUG] Preparing data for AI." >&2

  # Create prompt for ChatGPT
  local payload
  payload=$(jq -n \
    --arg model "gpt-4o" \
    --arg diff_info "$diff_output" \
    --arg sourceLang "$source_lang" \
    --arg targetLang "$target_lang" \
    --arg sourceFile "$source_content" \
    --arg partnerFile "$partner_content" \
    '{
      model: $model,
      messages: [
        {
          "role": "system",
          "content": (
            "You are a bilingual document alignment and translation assistant. " +
            "Given a source file in " + $sourceLang + " and a partner file in " + $targetLang + ", " +
            "your task is to update the partner file according to the diff of the source file. " +
            "Only the changes specified in the diff should affect the partner file. " +
            "Do not add unnecessary formatting such as double quotes (\"), triple quotes (```), or markdown code blocks. " +
            "If the source text does not use such formatting, the translation should not introduce it either. " +
            "Ensure that the output is clean, simple, and does not contain extra formatting or tags. " +
            "Content outside the diff range should remain unchanged, except for minimal grammar adjustments for consistency."
          )
        },
        {
          "role": "user",
          "content": (
            "Here is the diff of the source file:\n" +
            "```diff\n" + $diff_info + "\n```\n\n" +
            "Here is the full source file content (" + $sourceLang + "):\n" +
            "```" + $sourceFile + "```\n\n" +
            "Here is the full partner file content (" + $targetLang + "):\n" +
            "```" + $partnerFile + "```\n\n" +
            "Please update the partner file so that it reflects the changes in the source file, " +
            "translating any new or modified parts from " + $sourceLang + " to " + $targetLang + ". " +
            "Do not introduce any formatting such as double quotes, triple quotes, markdown code blocks, or other unnecessary elements. " +
            "Keep the output clean and simple. Ensure that areas of the partner file not affected by the diff remain unchanged except for grammatical consistency. " +
            "Return ONLY the updated partner file content."
          )
        }
      ],
      max_tokens: 3000,
      temperature: 0.1
    }'
  )

  echo "[DEBUG] JSON payload created. Calling OpenAI API." >&2

  # Call the OpenAI API
  local response
  response=$(curl -s https://api.openai.com/v1/chat/completions \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $TWIN_DOCS_OPENAI_API_KEY" \
    -d "$payload")

  echo "[DEBUG] Received response: $response" >&2

  # Extract the entire updated partner file content
  local updated_partner_content
  updated_partner_content=$(echo "$response" | jq -r '.choices[0].message.content // empty')

  if [ -z "$updated_partner_content" ] || [[ "$updated_partner_content" == "null" ]]; then
    echo "[ERROR] No valid updated partner file returned from the AI." >&2
    return 1
  fi

  echo "[DEBUG] Obtained the updated partner file from AI." >&2

  # 4. Update the partner file
  echo "$updated_partner_content" > "$partner_file"
  echo "[DEBUG] Updated the partner file." >&2
}

# --------------------------------------------------
# Function: auto_commit_translated_file
# Automatically commits translated files if changed
# --------------------------------------------------
auto_commit_translated_file() {
  local translated_file="$1"
  local original_file="$2"
  local source_lang="$3"
  local target_lang="$4"

  # Check if there are changes
  if [ -n "$(git status --porcelain "$translated_file")" ]; then
    # Generate commit message
    local commit_message="! Auto-translation ($source_lang -> $target_lang) of $original_file to $translated_file"

    git add "$translated_file"
    git commit -m "$commit_message"
    echo "[INFO] Created an auto-translation commit: $translated_file"
  else
    echo "[INFO] No changes detected in $translated_file after translation. No commit made."
  fi
}

# --------------------------------------------------
# Main loop
# --------------------------------------------------
for file in $CHANGED_FILES; do
  echo "[DEBUG] Processing file: $file"

  if [ ! -f "$file" ]; then
    echo "[DEBUG] $file does not exist. Skipping."
    continue
  fi

  if [[ "$file" =~ _ja\.md$ ]]; then
    partner_file="${file/_ja.md/_en.md}"
    apply_diff_translation "$file" "$partner_file" "ja" "en"
    auto_commit_translated_file "$partner_file" "$file" "ja" "en"
  elif [[ "$file" =~ _en\.md$ ]]; then
    partner_file="${file/_en.md/_ja.md}"
    apply_diff_translation "$file" "$partner_file" "en" "ja"
    auto_commit_translated_file "$partner_file" "$file" "en" "ja"
  fi
done

echo "[DEBUG] Script end"
exit 0